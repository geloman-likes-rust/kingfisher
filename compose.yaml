networks:
  kingfisher:
    driver: bridge

services:
  flask:
    container_name: flask
    build: .
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    ports:
      - 8000:8000
    networks:
      - kingfisher
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PGHOST=${PGHOST:-""}
      - PGUSER=${PGUSER:-""}
      - PGPASSWORD=${PGPASSWORD:-""}
      - PGDATABASE=${PGDATABASE:-""}
      - JWT_SECRET=${JWT_SECRET:-""}
      - ALLOWED_ORIGIN=${ALLOWED_ORIGIN:-""}
      - REDIS_HOST=${REDIS_HOST:-""}
      - REDIS_USER=${REDIS_USER:-""}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-""}
      - SUPER_ADMIN_USERNAME=${SUPER_ADMIN_USERNAME:-""}
      - SUPER_ADMIN_PASSWORD=${SUPER_ADMIN_PASSWORD:-""}

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: 448M
    ports:
      - 5432:5432
    networks:
      - kingfisher
    restart: on-failure
    volumes:
      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: ["CMD", "/usr/local/bin/pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 10s
      retries: 15
      start_period: 10s
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-""}
      - POSTGRES_USER=${POSTGRES_USER:-""}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-""}

  redis:
    container_name: redis
    image: redis:alpine3.19
    command: ["redis-server", "--maxmemory", "64mb", "--maxmemory-policy", "volatile-lru"]
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    ports:
      - 6379:6379
    networks:
      - kingfisher
    restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
